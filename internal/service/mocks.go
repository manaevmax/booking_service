// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -package service -source deps.go -destination mocks.go
//

// Package service is a generated GoMock package.
package service

import (
	entity "hotel/internal/entity"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderRepo) CreateOrder(order entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepoMockRecorder) CreateOrder(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepo)(nil).CreateOrder), order)
}

// MockAvailabilityRepo is a mock of AvailabilityRepo interface.
type MockAvailabilityRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAvailabilityRepoMockRecorder
}

// MockAvailabilityRepoMockRecorder is the mock recorder for MockAvailabilityRepo.
type MockAvailabilityRepoMockRecorder struct {
	mock *MockAvailabilityRepo
}

// NewMockAvailabilityRepo creates a new mock instance.
func NewMockAvailabilityRepo(ctrl *gomock.Controller) *MockAvailabilityRepo {
	mock := &MockAvailabilityRepo{ctrl: ctrl}
	mock.recorder = &MockAvailabilityRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailabilityRepo) EXPECT() *MockAvailabilityRepoMockRecorder {
	return m.recorder
}

// GetAvailableDates mocks base method.
func (m *MockAvailabilityRepo) GetAvailableDates(hotelID, roomID string) []time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableDates", hotelID, roomID)
	ret0, _ := ret[0].([]time.Time)
	return ret0
}

// GetAvailableDates indicates an expected call of GetAvailableDates.
func (mr *MockAvailabilityRepoMockRecorder) GetAvailableDates(hotelID, roomID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableDates", reflect.TypeOf((*MockAvailabilityRepo)(nil).GetAvailableDates), hotelID, roomID)
}

// OccupyDates mocks base method.
func (m *MockAvailabilityRepo) OccupyDates(hotelID, roomID string, from, to time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OccupyDates", hotelID, roomID, from, to)
}

// OccupyDates indicates an expected call of OccupyDates.
func (mr *MockAvailabilityRepoMockRecorder) OccupyDates(hotelID, roomID, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OccupyDates", reflect.TypeOf((*MockAvailabilityRepo)(nil).OccupyDates), hotelID, roomID, from, to)
}
